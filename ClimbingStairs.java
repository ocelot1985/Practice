package leetcode.prac;

//假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
//
//        每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
//
//        注意：给定 n 是一个正整数。
//
//        示例 1：
//
//        输入： 2
//        输出： 2
//        解释： 有两种方法可以爬到楼顶。
//        1.  1 阶 + 1 阶
//        2.  2 阶
//        示例 2：
//
//        输入： 3
//        输出： 3
//        解释： 有三种方法可以爬到楼顶。
//        1.  1 阶 + 1 阶 + 1 阶
//        2.  1 阶 + 2 阶
//        3.  2 阶 + 1 阶


public class ClimbingStairs {
    public int climbStairs(int n) {
        // 动态规划解法
        if (n <= 2) {
            return n;
        }
        // 1个台阶和2个台阶的解法个数
        int i1 = 1;
        int i2 = 2;
        for (int i=3;i<=n;i++) {
            // 台阶n的解法个数为n-1与n-2级台阶的解法个数之和
            // 因为每次上台阶的方法只能为1或2
            int temp = i1 + i2;
            i1 = i2;
            i2 = temp;
        }
        return i2;
    }
}
